
//
//  FILE NAME:  startupstate.ang
//
//  DESC:       Start up game state
//

final class CStartUpState : iGameState
{
    //
    //  Constructor
    //
    CStartUpState()
    {
        super( NStateDefs::EGS_STARTUP, NStateDefs::EGS_TITLE_SCREEN );
    }

    //
    //  Init the state
    //
    void init() override
    {
        // Load the data lists
        ObjectDataMgr.loadListTable( "data/objects/2d/objectDataList/dataListTable.lst" );
        StrategyMgr.loadListTable( "data/objects/spritestrategy/strategyListTable.lst" );
        
        ScriptMgr.loadGroup( "(state)" );
        
        // Load the start up group
        ObjectDataMgr.loadGroup2D( "(startup)" );
        
        // Init the default camera
        StrategyMgr.initDefaultCamera();
        
        iStrategy @strategy = StrategyMgr.createActorStrategy( "(startup)" );
        strategy.setCommandBuffer( "(startup)" );
        strategy.enable();
        
        strategy.create( "waffles" );
        
        // Do the fade in
        Spawn("State_StartUpFadeIn", "(state)");
        
        // Create all the needed strategies
        /*@strategyFor2D = StrategyMgr.createBasicSpriteStrategy( "strategyFor2D" );
        StrategyMgr.createBasicSpriteStrategy( "strategyFor3D" );
        StrategyMgr.createMenuStrategy( "menu" );

        // Load this states assets and display the logo
        loadStateAndFadeIn();

        // Do the fade in
        Screen_FadeIn();

        // Load the remaining assets
        loadAssets();

        // Loading done, fade out
        Screen_FadeOut();

        doChangeState();*/
    }
    
    //
    //  Destroy the state
    //
    void destroy() override
    {
        // Wait for all rendering to be finished
        Device.waitForIdle();
        
        ObjectDataMgr.freeGroup2D( "(startup)" );
        StrategyMgr.deleteStrategy( "(startup)" );
    }
    
    //
    //  Update animations, Move sprites, Check for collision
    //
    void update() override
    {
        StrategyMgr.update();
    }
    
    //
    //  Transform game objects
    //
    void transform() override
    {
        StrategyMgr.transform();
    }

    //
    //  Load this states assets for displaying the logo
    //
    void loadStateAndFadeIn()
    {
        // Load the 2d object data list table
        /*ObjectDataMgr.loadListTable( "data/objects/2d/objectDataList/dataListTable.lst" );

        // Load the start up group
        ObjectDataMgr.loadGroup2D( "(startup)" );

        // Create the logo for the sprite strategy
        @m_logo = strategyFor2D.createSprite( "(startup)", "logo" );*/
    }

    //
    //  Load the remaining assets
    //
    void loadAssets()
    {
        // Load the list tables
        /*ObjectDataMgr.loadListTable( "data/objects/3d/objectDataList/dataListTable.lst" );
        MenuMgr.loadListTable( "data/objects/2d/menu/menuListTable.lst" );
        SoundMgr.loadListTable( "data/sound/soundListTable.lst" );

        // Load the menu scripts
        ScriptMgr.loadGroup( "(menu)" );

        // Load in any fonts
        FontMgr.load( "data/textures/fonts/font.lst" );

        // Load the action manager - Must be loaded before memu system
        ActionMgr.load( "data/settings/controllerMapping.cfg" );

        // Load the menu action list
        MenuMgr.loadMenuAction( "data/objects/2d/menu/menu_action.list" );

        // Load the start up animation group
        ObjectDataMgr.loadGroup2D( "(menu)" );
        
        SoundMgr.loadGroup("(menu)");

        // Load the menu group
        MenuMgr.loadGroup("(menu)");
        
        NTitleScreenState::ObjectDataLoad();*/
    }
};

